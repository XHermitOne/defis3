#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Тестируем работу класса данных.
"""
#This file was originally generated by PyScripter's unitest wizard

import unittest
import ic.db.icsqlalchemy as icsqlalchemy
from ic.utils import resource
from sqlalchemy import *
import ic.kernel.io_prnt as io_prnt

class TesticSQLAlchemyDataClass(unittest.TestCase):

    def setUp(self):
        pass
        
    def tearDown(self):
        pass

    def open_db(self):
        """
        """
        db_engine=create_engine('sqlite:///sqlite/input.db', strategy='threadlocal')
        io_prnt.outLog('open sqlite:///sqlite/input.db - ok!')
        return db_engine

    def open_db_1(self):
        """
        """
        db_engine=create_engine('sqlite:///sqlite/input1.db', strategy='threadlocal')
        io_prnt.outLog('open sqlite:///sqlite/input1.db - ok!')
        return db_engine

    def open_pgs(self):
        """
        """
        db_engine = create_engine('postgres://ic_all:ic_all@x.ic.plus:5432/ic_db')
        print()
        io_prnt.outLog('open postgres://ic_all:ic_all@x.ic.plus:5432/ic_db')
        return db_engine
        
    def _test_testEngine(self):
        """
        """
        #--- открываем базы
        db = self.open_db()
        db1 = self.open_db_1()
        
        #--- создаем метаданные
        meta = BoundMetaData(db)
        meta1 = BoundMetaData(db1)

        r = db1.execute('select * from proizv')
        print('>>> meta1=', meta1)
        for i, el in enumerate(r):
            print('', el)
        
        r = db.execute('select * from proizv')
        print('>>> meta=', meta)
        for i, el in enumerate(r):
            print('', el)
            
    def test_PGS(self):
        """
        """
        connection = self.open_pgs().connect()
        result = connection.execute(u'select * from NSI_list limit 10')
        for row in result:
            print(row)
        connection.close()
      
    def test_mapper(self):
        """
        Тестирование мапперов.
        """
        pass
        
#    def testgetConnection(self):
#        pass
#
#    def testgetClassName(self):
#        pass
#
#    def testdelete(self):
#        pass
#
#    def testdel_where(self):
#        pass
#
#    def testadd(self):
#        pass
#
#    def testupdate(self):
#        pass
#
#    def testget(self):
#        pass
#
#    def testget_where(self):
#        pass
#
#    def testis_id(self):
#        pass
#
#    def testcount(self):
#        pass
#
#    def testselect(self):
#        pass
#
#    def testlistRecs(self):
#        pass
#
#    def testqueryAll(self):
#        pass
#
#    def testqueryRecs(self):
#        pass
#
#    def testexecuteSQL(self):
#        pass
#
#    def testdrop(self):
#        pass
#
#    def testLock(self):
#        pass
#
#    def testunLock(self):
#        pass
#
#    def testLockObject(self):
#        pass
#
#    def testunLockObject(self):
#        pass

if __name__ == '__main__':
    #unittest.main()
    suite = unittest.TestLoader().loadTestsFromTestCase(TesticSQLAlchemyDataClass)
    unittest.TextTestRunner(verbosity=2).run(suite)

    
