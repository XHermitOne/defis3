#!/usr/bin/env python
#  -*- coding: utf-8 -*-

#This file was originally generated by PyScripter's unitest wizard

import unittest
from ic.utils import resource
import os
from ic.kernel import io_prnt
class TestGlobalFunctions(unittest.TestCase):

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def testicGetKernel(self):
        pass

    def testicGetResPath(self):
        pass

    def testicGetSysPath(self):
        pass

    def testicGetSubsys(self):
        pass

    def testIsDebugMode(self):
        pass

    def testicGetUserPath(self):
        pass

    def testicSetUserVariable(self):
        pass

    def testicGetUserVariable(self):
        pass

    def testicGetSubsysResPaths(self):
        pass

    def testicGetICPath(self):
        pass

    def testicGetRes(self):
        path, nm = os.path.split(__file__)
        res = resource.icGetRes(None, 'frm', path, nameRes='test_res')
        io_prnt.outLog('>>> read resource name:%s type:%s' % (res['name'], res['type']))
        self.assertEqual(res['type'], 'Panel')
        self.assertEqual(res['name'], 'test1_panel')

    def testicSaveRes(self):
        pass

    def testFindResInRes(self):
        """
        Поиск ресурса.
        """
        path, nm = os.path.split(__file__)
        res = resource.icGetRes(None, 'frm', path, nameRes='test_res')
        io_prnt.outLog('read resource name:%s type:%s' % (res['name'], res['type']))
        
        r = resource.FindResInRes(res, 'btn2', 'Button')
        self.assertEqual(r['type'], 'Button')
        self.assertEqual(r['name'], 'btn2')
        
        r = resource.FindResInRes(res, 'btn1')
        self.assertEqual(r['type'], 'Button')

if __name__ == '__main__':
    unittest.main()
