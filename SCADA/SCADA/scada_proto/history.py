#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Модуль базовых классов моделей регистрацинных
временных (исторических) данных.
Для упрощения называемых ИСТОРИЕЙ.
"""

from ic.log import log

__version__ = (0, 1, 2, 1)


class icHistoryProto(object):
    """
    Базовый класс исторических данных.
    Организует общий интерфейс к объектам моделей исторических данных.
    """

    def get(self, start_dt, stop_dt, rec_filter=None):
        """
        Получить исторические данные указанного диапазона.

        :type start_dt: datetime.datetime.
        :param start_dt: Начальное дата-время диапазона кеширования.
        :type stop_dt: datetime.datetime.
        :param stop_dt: Конечная дата-время диапазона кеширования.
        :param rec_filter: Функция дополнительного фильтра записей.
            Если функция не указана, то берется значение 'rec_filter' из спецификации.
            Если фукция задается текстовым блоком кода:
            В качестве аргумента функция принимает текущую запись в виде словаря.
            В пространстве имен есть переменная RECORD, указывающая на текущую запись.
            Функция возвращает True для записи, которая попадает в результирующий список,
            False - если не попадает.
        :return: Список словарей записей широкого формата указанного диапазона.
            Или пустой список в случае ошибки.
        """
        log.warning(u'Не определен метод <get> в компоненте <%s>' % self.__class__.__name__)
        return None

    def get_tag_data(self, tag_name, start_dt, stop_dt, rec_filter=None):
        """
        Получить исторические данные указанного диапазона по определенному тегу.

        :param tag_name: Имя тега.
        :type start_dt: datetime.datetime.
        :param start_dt: Начальное дата-время диапазона кеширования.
        :type stop_dt: datetime.datetime.
        :param stop_dt: Конечная дата-время диапазона кеширования.
        :param rec_filter: Функция дополнительного фильтра записей.
            Если функция не указана, то берется значение 'rec_filter' из спецификации.
            Если фукция задается текстовым блоком кода:
            В качестве аргумента функция принимает текущую запись в виде словаря.
            В пространстве имен есть переменная RECORD, указывающая на текущую запись.
            Функция возвращает True для записи, которая попадает в результирующий список,
            False - если не попадает.
        :return: Список записей {'dt': дата-время из указанного диапазона,
                                 'data': значение тега}.
            Или пустой список в случае ошибки.
        """
        log.warning(u'Не определен метод <get_tag_data> в компоненте <%s>' % self.__class__.__name__)
        return None

    def get_last(self, rec_filter=None, rec_limit=1):
        """
        Получить последние зарегистрированные исторические данные.

        :param rec_filter: Функция дополнительного фильтра записей.
            Если функция не указана, то берется значение 'rec_filter' из спецификации.
            Если фукция задается текстовым блоком кода:
            В качестве аргумента функция принимает текущую запись в виде словаря.
            В пространстве имен есть переменная RECORD, указывающая на текущую запись.
            Функция возвращает True для записи, которая попадает в результирующий список,
            False - если не попадает.
        :param rec_limit: Ограничение количества записей.
        :return: Последняя зарегистрированная запись широкого формата в виде словаря.
            Или пустой словарь в случае ошибки.
        """
        log.warning(u'Не определен метод <get_last> в компоненте <%s>' % self.__class__.__name__)
        return None

    def get_last_tag_data(self, tag_name, rec_filter=None, rec_limit=1):
        """
        Получить последние зарегистрированные исторические данные по определенному тегу.

        :param rec_filter: Функция дополнительного фильтра записей.
            Если функция не указана, то берется значение 'rec_filter' из спецификации.
            Если фукция задается текстовым блоком кода:
            В качестве аргумента функция принимает текущую запись в виде словаря.
            В пространстве имен есть переменная RECORD, указывающая на текущую запись.
            Функция возвращает True для записи, которая попадает в результирующий список,
            False - если не попадает.
        :param rec_limit: Ограничение количества записей.
        :return: Словарь {'dt': дата-время последней регистрации,
                          'data': значение тега}.
            Или пустой словарь в случае ошибки.
        """
        log.warning(u'Не определен метод <get_last_tag_data> в компоненте <%s>' % self.__class__.__name__)
        return None

    def get_first(self, rec_filter=None, rec_limit=1):
        """
        Получить первые зарегистрированные исторические данные.

        :param rec_filter: Функция дополнительного фильтра записей.
            Если функция не указана, то берется значение 'rec_filter' из спецификации.
            Если фукция задается текстовым блоком кода:
            В качестве аргумента функция принимает текущую запись в виде словаря.
            В пространстве имен есть переменная RECORD, указывающая на текущую запись.
            Функция возвращает True для записи, которая попадает в результирующий список,
            False - если не попадает.
        :param rec_limit: Ограничение количества записей.
        :return: Первая зарегистрированная запись широкого формата в виде словаря.
            Или пустой словарь в случае ошибки.
        """
        log.warning(u'Не определен метод <get_first> в компоненте <%s>' % self.__class__.__name__)
        return None

    def get_first_tag_data(self, tag_name, rec_filter=None, rec_limit=1):
        """
        Получить первые зарегистрированные исторические данные по определенному тегу.

        :param rec_filter: Функция дополнительного фильтра записей.
            Если функция не указана, то берется значение 'rec_filter' из спецификации.
            Если фукция задается текстовым блоком кода:
            В качестве аргумента функция принимает текущую запись в виде словаря.
            В пространстве имен есть переменная RECORD, указывающая на текущую запись.
            Функция возвращает True для записи, которая попадает в результирующий список,
            False - если не попадает.
        :param rec_limit: Ограничение количества записей.
        :return: Словарь {'dt': дата-время первой регистрации,
                          'data': значение тега}.
            Или пустой словарь в случае ошибки.
        """
        log.warning(u'Не определен метод <get_first_tag_data> в компоненте <%s>' % self.__class__.__name__)
        return None


class icWideHistoryProto(icHistoryProto):
    """
    Базовый класс исторических данных ШИРОКОГО формата.
    Широкий формат файла (Wide):
        В файле широкого формата в одной строке хранится
        одна дата, одно время и несколько значений тегов. На
        нижеследующей иллюстрации показано, как значения
        тегов хранятся в таком файле.
            ====================================================
            Date1 | Time1 | Tag1 value | Tag2 value | Tag3 value >=> Это один снимок данных
            Date2 | Time2 | Tag1 value | Tag2 value | Tag3 value
             ...  |  ...  |  ...       |  ...       |  ...
            DateN | TimeN | Tag1 value | Tag2 value | Tag3 value
            ====================================================
    """
    pass


class icNarrowHistoryProto(icHistoryProto):
    """
    Базовый класс исторических данных УЗКОГО формата.
    Узкий формат файла (Narrow):
        В файле узкого формата в одной строке хранится одна
        дата, одно время и одно значение тега. На
        нижеследующей иллюстрации показано, как значения
        тегов хранятся в таком файле.
        ==========================
        Date1 | Time1 | Tag1 value \
        Date1 | Time1 | Tag2 value  >=> Это один снимок данных
        Date1 | Time1 | Tag3 value /
        Date2 | Time2 | Tag1 value
        Date2 | Time2 | Tag2 value
        Date2 | Time2 | Tag3 value
        ==========================
    """
    pass
